service: serverless-node-dynamodb-api

plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dynamodb-autoscaling
  - serverless-plugin-custom-domain

provider:
  name: aws
  runtime: nodejs6.10
  stage: prod
  region: ap-southeast-2
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Query
        - dynamodb:UpdateItem
      Resource:
        - "Fn::Join": ["", ["arn:aws:dynamodb:", {"Ref": "AWS::Region"}, ":", {"Ref": "AWS::AccountId"}, ":table/items*"]]

package:
  individually: true

custom:
  domain: sls-api.603.nz
  webpack: ./webpack.config.ts
  webpackIncludeModules: true
  dynamodb:
    start:
      port: ${env:DYNAMODB_PORT}
      inMemory: true
      migrate: true
  capacities:
    - table: ItemsTable
      index:
        - userId-index
      read:
        minimum: 1
        maximum: 10
        usage: 0.1
      write:
        minimum: 1
        maximum: 10
        usage: 0.1

functions:
  authorizer:
    handler: src/index.authorizer
    environment:
      AUTH0_CLIENT_SECRET: ${env:AUTH0_CLIENT_SECRET}

  getAllItems:
    handler: src/index.getAllItemsHandler
    memory: 512
    timeout: 60
    events:
      - http:
          method: get
          path: items
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  getItem:
    handler: src/index.getItemHandler
    memory: 512
    timeout: 60
    events:
      - http:
          method: get
          path: items/{id}
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  createItem:
    handler: src/index.createItemHandler
    memory: 512
    timeout: 60
    events:
      - http:
          method: post
          path: items
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  updateItem:
    handler: src/index.updateItemHandler
    memory: 512
    timeout: 60
    events:
      - http:
          method: patch
          path: items/{id}
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

  deleteItem:
    handler: src/index.deleteItemHandler
    memory: 512
    timeout: 60
    events:
      - http:
          method: delete
          path: items/{id}
          cors: true
          integration: lambda-proxy
          authorizer:
            name: authorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization

resources:
  Resources:
    ItemsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: "items"
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        - AttributeName: "userId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        - AttributeName: "userId"
          KeyType: "RANGE"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        GlobalSecondaryIndexes:
        - IndexName: "userId-index"
          KeySchema:
          - AttributeName: "userId"
            KeyType: "HASH"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
    GatewayResponse:
      Type: 'AWS::ApiGateway::GatewayResponse'
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId: 
          Ref: 'ApiGatewayRestApi'
        StatusCode: '401'
